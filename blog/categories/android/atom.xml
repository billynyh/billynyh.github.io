<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: android | Just code it]]></title>
  <link href="http://billynyh.github.io//blog/categories/android/atom.xml" rel="self"/>
  <link href="http://billynyh.github.io//"/>
  <updated>2015-05-16T17:14:56+08:00</updated>
  <id>http://billynyh.github.io//</id>
  <author>
    <name><![CDATA[Billy Ng]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Connect 163.com with Javamail]]></title>
    <link href="http://billynyh.github.io//blog/2015/05/16/javamail-163/"/>
    <updated>2015-05-16T17:09:41+08:00</updated>
    <id>http://billynyh.github.io//blog/2015/05/16/javamail-163</id>
    <content type="html"><![CDATA[<p>Last week I was working on supporting more IMAP email service provider in our app. 163.com is a popular email service used in China, so we created a test account to play around with it.</p>

<p>We already have code working on various email service like yahoo and outlook, so I expect it should not be any problem to connect 163.com, maybe a few custom handling on simplified Chinese.</p>

<p>However, when I try to make connection to IMAP server, I got</p>

<pre><code>NO SELECT The login is not safe! Please update your mail client: http://mail.163.com/dashi
</code></pre>

<p>and the link provided goes to the download page of 163&rsquo;s official app.</p>

<p>It would be sad if 163 somehow limited the IMAP usage to certain apps but let&rsquo;s not jump to conclusion so fast. After some research, we found that Gmail android app can actually login to 163 account, and that&rsquo;s the only one we found so far. Googled around and see others met similar problem and found one interesting (and wtf) workaround.</p>

<p><a href="https://github.com/dinhviethoa/libetpan/pull/190">https://github.com/dinhviethoa/libetpan/pull/190</a>
<a href="https://github.com/dinhviethoa/libetpan/commit/050f15f30ce40c02d4cf0a9389baca77dec19230">https://github.com/dinhviethoa/libetpan/commit/050f15f30ce40c02d4cf0a9389baca77dec19230</a></p>

<p><img src="/images/posts/20150516/imap-163.jpg" width="600px" /></p>

<p>So what does that workaround do? IMAP command is usually in the format</p>

<pre><code>1 CAPABILITY 
2 LOGIN USERNAME PASSWORD 
3 CAPABILITY 
4 LIST "" "" 
5 ID NIL 
6 SELECT INBOX  
</code></pre>

<p>but 163 required a &ldquo;C&rdquo; before each command, eg</p>

<pre><code>C1 CAPABILITY
</code></pre>

<p>so the fix is&hellip; add &ldquo;C&rdquo;.</p>

<p>To apply to Javamail, we need to modify the Protocol object&rsquo;s writeCommand method and use a &ldquo;C&rdquo; prefix for 163 (also 126.com, yeah.net) imap host address.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Implement meme generator with StaticLayout]]></title>
    <link href="http://billynyh.github.io//blog/2015/04/26/meme-generator-staticlayout/"/>
    <updated>2015-04-26T15:56:48+08:00</updated>
    <id>http://billynyh.github.io//blog/2015/04/26/meme-generator-staticlayout</id>
    <content type="html"><![CDATA[<p>Two months ago I started writing a meme generator as a side project, what I want to do is not just adding two lines of text on image but a more generic text-on-image solution.</p>

<h1>StaticLayout</h1>

<p>When implementing custom views, we can use canvas.drawText to display text, but if you want to draw text in multiple lines, a straight forward way is to calculate the y position of each line and draw them one by one. One problem with this method is that, you have to do the line splitting yourself and it seems lots of work.</p>

<p><a href="https://developer.android.com/reference/android/text/StaticLayout.html">StaticLayout</a> is a less well-known class in the framework, it is not included in any API Guides or Training documentation.</p>

<blockquote><p>This is used by widgets to control text layout. You should not need to use this class directly unless you are implementing your own widget or custom display object, or would be tempted to call Canvas.drawText() directly.</p></blockquote>

<p>But if you take a quick look of inside TextView (like 5000 lines, I have not read it in detail), you will find that StaticLayout is used to do the text layout.</p>

<h1>Meme generator structure</h1>

<h2>RendererView</h2>

<p>A custom view that extends ImageView to provide text on image drawing ability, the actually text drawing logic is implemented in the renderer.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RendererView</span> <span class="kd">extends</span> <span class="n">ImageView</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">private</span> <span class="n">Renderer</span> <span class="n">mRenderer</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// fill in constrcutor</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">setRenderer</span><span class="o">(</span><span class="n">MemeRenderer</span> <span class="n">renderer</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">mRenderer</span> <span class="o">=</span> <span class="n">renderer</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onDraw</span><span class="o">(</span><span class="n">Canvas</span> <span class="n">canvas</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">super</span><span class="o">.</span><span class="na">onDraw</span><span class="o">(</span><span class="n">canvas</span><span class="o">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">mRenderer</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mRenderer</span><span class="o">.</span><span class="na">draw</span><span class="o">(</span><span class="n">canvas</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>TextGroup</h2>

<p>A basic TextGroup manages the text, Paint and StaticLayout object.</p>

<p>To draw text with stroke, we need to draw it twice, first draw the stroke (using Paint.Style.STROKE), then draw the text over it. I use a wrapper TextGroup interface to wrap the text and the stroke layout, and can extend to arbitrary number of text layer.</p>

<h2>Renderer</h2>

<p>Renderer implements a draw(canvas) function to draw text on canvas. In the case of meme generator, the renderer contains two TextGroup, top and bottom. In the draw function, we translate to proper position and run the draw function implemented in the TextGroup.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">draw</span><span class="o">(</span><span class="n">Canvas</span> <span class="n">canvas</span><span class="o">)</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">// some calculation</span>
</span><span class='line'>
</span><span class='line'><span class="n">canvas</span><span class="o">.</span><span class="na">save</span><span class="o">();</span>
</span><span class='line'><span class="n">canvas</span><span class="o">.</span><span class="na">translate</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">topY</span><span class="o">);</span>
</span><span class='line'><span class="n">mTopGroup</span><span class="o">.</span><span class="na">draw</span><span class="o">(</span><span class="n">canvas</span><span class="o">);</span>
</span><span class='line'><span class="n">canvas</span><span class="o">.</span><span class="na">restore</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="n">canvas</span><span class="o">.</span><span class="na">save</span><span class="o">();</span>
</span><span class='line'><span class="n">canvas</span><span class="o">.</span><span class="na">translate</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">bottomY</span><span class="o">);</span>
</span><span class='line'><span class="n">mBottomGroup</span><span class="o">.</span><span class="na">draw</span><span class="o">(</span><span class="n">canvas</span><span class="o">);</span>
</span><span class='line'><span class="n">canvas</span><span class="o">.</span><span class="na">restore</span><span class="o">();</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><img src="/images/posts/20150426/meme-1.jpg" width="300px" /></p>

<h2>AutoResizer</h2>

<p>With the help of StaticLayout, you can get the line count of your current layout and can adjust your text size to provide an auto resize function.</p>

<h1>Play store submission</h1>

<p>When I tried to upload my meme generator demo to play store, the new review system rejected my submission as some meme may have copyright issue&hellip; So I just changed my images to some free stock photo to get pass the review process.</p>

<p>Here is my <a href="https://play.google.com/store/apps/details?id=io.github.billynyh.meme">demo app</a></p>

<h1>Future work</h1>

<p>With the structure I have, I suppose it is easy to modify the app to provide different style/layout and create use case other than meme generator. I have few ideas in mind but that may require other data api and image source to make it works.</p>

<h1>Reference</h1>

<ul>
<li><a href="http://stackoverflow.com/a/8369690/3623175">http://stackoverflow.com/a/8369690/3623175</a></li>
<li><a href="http://stackoverflow.com/a/12921000/3623175">http://stackoverflow.com/a/12921000/3623175</a></li>
<li><a href="http://www.ivity.asia/2010/12/29/using-android-text-staticlayout/">http://www.ivity.asia/2010/12/29/using-android-text-staticlayout/</a></li>
<li><a href="http://andrdev.blogspot.hk/2012/04/drawing-text-on-canvas.html">http://andrdev.blogspot.hk/2012/04/drawing-text-on-canvas.html</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Little experience on solving dex method count limit]]></title>
    <link href="http://billynyh.github.io//blog/2014/11/01/dex-method-count/"/>
    <updated>2014-11-01T20:02:45+08:00</updated>
    <id>http://billynyh.github.io//blog/2014/11/01/dex-method-count</id>
    <content type="html"><![CDATA[<p>I have heard about the dex 65536 method count limit long time ago and I finally meet this problem recently. After digging around, I decided to strip off some unused method in an external jar, using jarjar.</p>

<p>Here are some little steps I used, using asmack jar as example.</p>

<h3>Before fix</h3>

<pre><code># convert jar to dex
&gt;&gt; $BUILD_TOOL_PATH/dx --dex --output asmack.dex asmack.jar
# method count
&gt;&gt; dex-method-count asmack.dex
5584
&gt;&gt; dex-method-count-by-package asmack.dex
...
113 com.novell
...
61  de.measite
...
1894    org.jivesoftware.smack
...
3585    org.jivesoftware.smackx
...
423 org.apachea
...
</code></pre>

<h3>Create rule.txt with this line</h3>

<pre><code>zap org.jivesoftware.**
</code></pre>

<h3>Run jarjar</h3>

<pre><code># run modify jar
&gt;&gt; java -jar jarjar.jar process rule.txt asmack.jar asmack-modified.jar

# build dex file again
&gt;&gt; $BUILD_TOOL_PATH/dx --dex --output asmack-modified.dex asmack-modified.jar

# see the difference
&gt;&gt; dex-method-count asmack-modified.dex
554
</code></pre>

<h2>Reference</h2>

<ul>
<li><a href="https://code.google.com/p/jarjar/">https://code.google.com/p/jarjar/</a></li>
<li><a href="https://medium.com/@rotxed/dex-skys-the-limit-no-65k-methods-is-28e6cb40cf71">https://medium.com/@rotxed/dex-skys-the-limit-no-65k-methods-is-28e6cb40cf71</a></li>
<li><a href="http://jakewharton.com/play-services-is-a-monolith/">http://jakewharton.com/play-services-is-a-monolith/</a></li>
<li>dex.sh &ndash; <a href="https://gist.github.com/JakeWharton/6002797">https://gist.github.com/JakeWharton/6002797</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android OAuth with signpost and retrofit]]></title>
    <link href="http://billynyh.github.io//blog/2014/10/26/android-retrofit-oauth-signpost/"/>
    <updated>2014-10-26T17:34:45+08:00</updated>
    <id>http://billynyh.github.io//blog/2014/10/26/android-retrofit-oauth-signpost</id>
    <content type="html"><![CDATA[<p>This week I finally got time to play with square&rsquo;s retrofit library. The first thing I wanted to try is to use it to for Twitter API. I immediately met a problem &ndash; how to do oauth? I was hoping retrofit would just work out of the box, but I can&rsquo;t find any example in the site, and even not much results when google/stackoverflow around.</p>

<p>It seems that twitter4j provide full support of twitter api from oauth to getting posts, but as my goal is to try out retrofit, I decided not to use twitter4j at this point. Moreover, I will call different api later so it&rsquo;s better for me to figure out how to do oauth on Android.</p>

<h2>Scribe-java</h2>

<p>I first found this <a href="https://github.com/fernandezpablo85/scribe-java">Scribe</a> java library, I like the way the author describe the library.</p>

<pre><code>Who said OAuth was difficult? Configuring scribe is so easy your grandma can do it! check it out:
</code></pre>

<p> And it supports many existing oauth library including Google, Facebook, Yahoo, LinkedIn, Twitter, etc&hellip;  It is easy to find <a href="http://schwiz.net/blog/2011/using-scribe-with-android/">example on integrating scribe with android</a>. I tried this library and can successfully get pass the authorization steps, but one problem is that the library wrapped the request object so it may not work well with retrofit, I stopped here and did not dig deeper with this library even I like this a lot.</p>

<h2>Signpost</h2>

<p>Then I tried <a href="https://code.google.com/p/oauth-signpost/">Signpost</a> (<a href="https://github.com/mttkay/signpost">github</a>), this is a simple library that focus on signing the request and does not wrap request with custom object. Not like Scribe, Signpost does not implement any existing service, but implementing one is just providing the corresponding oauth api url.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">OAuthConsumer</span> <span class="n">consumer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DefaultOAuthConsumer</span><span class="o">(&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="n">API_KEY</span><span class="o">,</span> <span class="n">API_SECRET</span><span class="o">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">OAuthProvider</span> <span class="n">provider</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DefaultOAuthProvider</span><span class="o">(&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="s">&quot;https://api.twitter.com/oauth/request_token&quot;</span><span class="o">,</span>
</span><span class='line'>    <span class="s">&quot;https://api.twitter.com/oauth/access_token&quot;</span><span class="o">,</span>
</span><span class='line'>    <span class="s">&quot;https://api.twitter.com/oauth/authorize&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The Android integration of signpost is similar to scribe. After the authorization steps, it can hook into retrofit by <a href="https://gist.github.com/julianshen/5889097">extending the client</a>.</p>

<p>Here is my code for integration &ndash; <a href="https://gist.github.com/billynyh/9e96d228b0e64c7c3251">gist</a></p>

<h2>Reference</h2>

<ul>
<li><p>Signpost</p>

<ul>
<li><a href="https://github.com/mttkay/signpost">https://github.com/mttkay/signpost</a></li>
<li><a href="https://code.google.com/p/oauth-signpost/">https://code.google.com/p/oauth-signpost/</a></li>
<li><a href="https://gist.github.com/julianshen/5889097">https://gist.github.com/julianshen/5889097</a></li>
<li><a href="http://julianshen.blogspot.hk/2013/06/android-retrofit-signpost-retrofitoauth.html">http://julianshen.blogspot.hk/2013/06/android-retrofit-signpost-retrofitoauth.html</a></li>
<li><a href="https://github.com/square/retrofit/issues/185">https://github.com/square/retrofit/issues/185</a></li>
</ul>
</li>
<li><p>Scribe</p>

<ul>
<li><a href="https://github.com/fernandezpablo85/scribe-java">https://github.com/fernandezpablo85/scribe-java</a></li>
<li><a href="https://github.com/fernandezpablo85/scribe-java/wiki/getting-started">https://github.com/fernandezpablo85/scribe-java/wiki/getting-started</a></li>
<li><a href="https://github.com/fernandezpablo85/scribe-java/blob/master/src/test/java/org/scribe/examples/TwitterExample.java">scribe twitter example</a></li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android XMPP Development]]></title>
    <link href="http://billynyh.github.io//blog/2014/09/28/android-xmpp-dev/"/>
    <updated>2014-09-28T15:31:48+08:00</updated>
    <id>http://billynyh.github.io//blog/2014/09/28/android-xmpp-dev</id>
    <content type="html"><![CDATA[<p>I was working on a chat feature on Android last two months using the aSmack library, here are some notes for future reference, although some detail may already not applicable for latest version of smack.</p>

<p><a href="https://github.com/igniterealtime/Smack">Smack</a></p>

<p><blockquote><p>Smack is a library for communicating with XMPP servers to perform real-time communications, including instant messaging and group chat.</p></p><p><p>Extremely simple to use, yet powerful API. Sending a text message to a user can be accomplished in only a few lines of code</p></blockquote></p>

<p><a href="https://github.com/Flowdalic/asmack">aSmack</a></p>

<p><blockquote><p>buildsystem for Smack on Android</p></blockquote></p>

<h2>Integration</h2>

<p>The sample code is very simple, just create a connection object, .connect(), .login(), create a chat object and send. But to integrate to Android, of course we need to do it in a background service, and here are the items I personally found difficult to handle well.</p>

<ul>
<li>Handle connection state, connection listener seems not handle all connection events</li>
<li>May stuck in strange login state</li>
<li>User do action while connecting</li>
<li>Decide when to close the connection and stop background service</li>
<li>Smack does not have much doc</li>
<li>aSmack does not have doc at all</li>
<li>Smack is still in development</li>
<li>Not so extensible in some cases and it is hard to modify the library</li>
</ul>


<h2>Customized login method</h2>

<p>If you customized the xmpp server to provide custom authenticate logic to integrate to external service, you can extends SASLMechanism in client side to support that. However, the authenticate call only accept jid and password parameter, and you may need to do some hack to pass more data to it if your authentication api required. Also, the response format of the login call is very limited, you cannot return extra customized error message so there may be some troubles when you want to have different handling on error cases in client side.</p>

<h2>Customized IQ</h2>

<p>Adding customized IQ is quite easy in smack, though you need it in a few places and may not work if you missed one. For one IQ type, you need to be clear on two things, the format you sent out and the format you receive. For the ease of development, you may want to put both implementation in one class, just make sure you don&rsquo;t messed with it.</p>

<p>For sent out, you actually just need to construct the xml string and return in getChildElementXML(), no other setup needed.</p>

<p>For receiving IQ response, first you need to create IQProvider and add to ProviderManager, matching the xmlns in the query object. The IQProvider is used to convert the response packet to your customized IQ object. Then you need to extends PacketListener, and when you create the connection object, add the listener to it, with a PacketTypeFilter to match your IQ class. With both provider and listener setup correctly, you should be able to receive the response of the IQ.</p>

<h2>XEP 0198 &ndash; stream management</h2>

<p>I have no knowledge of XMPP before working on this project (actually still don&rsquo;t know much about the protocol), but after implemented the basic program flow, we found that it is easy to trigger some message lost conditions. Turned out that xmpp is designed for stable network condition, so the support of mobile usage is actually quite bad.</p>

<ul>
<li><a href="http://fnanp.in-ulm.de/blog/2014/01/16/01-woes.html">http://fnanp.in-ulm.de/blog/2014/01/16/01-woes.html</a></li>
<li><a href="http://op-co.de/blog/posts/mobile_xmpp_in_2014/">http://op-co.de/blog/posts/mobile_xmpp_in_2014/</a></li>
</ul>


<p>An extension XEP 0198 is targeted for the message lost condition, I am not sure if it can really solve the problem, but at the time I started the development around end of July, XEP 0198 is not supported in Smack. The project seems quite active and the latest alpha version of Smack (4.0) seems included stream management but seems they have quite many changes and need some time to migrate from older version so I have not tried it yet. Also Smack 4.0 have Android support integrated so no need to use aSmack anymore.</p>

<ul>
<li><a href="https://github.com/igniterealtime/Smack">https://github.com/igniterealtime/Smack</a></li>
<li><a href="https://igniterealtime.jiveon.com/blogs/ignite/2014/09/13/smack-410-alpha1-available">https://igniterealtime.jiveon.com/blogs/ignite/2014/09/13/smack-410-alpha1-available</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
