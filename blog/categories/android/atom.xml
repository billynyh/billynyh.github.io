<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: android | Just code it]]></title>
  <link href="http://billynyh.github.io//blog/categories/android/atom.xml" rel="self"/>
  <link href="http://billynyh.github.io//"/>
  <updated>2014-09-28T15:35:16+08:00</updated>
  <id>http://billynyh.github.io//</id>
  <author>
    <name><![CDATA[Billy Ng]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android XMPP Development]]></title>
    <link href="http://billynyh.github.io//blog/2014/09/28/android-xmpp-dev/"/>
    <updated>2014-09-28T15:31:48+08:00</updated>
    <id>http://billynyh.github.io//blog/2014/09/28/android-xmpp-dev</id>
    <content type="html"><![CDATA[<p>I was working on a chat feature on Android last two months using the aSmack library, here are some notes for future reference, although some detail may already not applicable for latest version of smack.</p>

<p><a href="https://github.com/igniterealtime/Smack">Smack</a></p>

<p><blockquote><p>Smack is a library for communicating with XMPP servers to perform real-time communications, including instant messaging and group chat.</p></p><p><p>Extremely simple to use, yet powerful API. Sending a text message to a user can be accomplished in only a few lines of code</p></blockquote></p>

<p><a href="https://github.com/Flowdalic/asmack">aSmack</a></p>

<p><blockquote><p>buildsystem for Smack on Android</p></blockquote></p>

<h2>Integration</h2>

<p>The sample code is very simple, just create a connection object, .connect(), .login(), create a chat object and send. But to integrate to Android, of course we need to do it in a background service, and here are the items I personally found difficult to handle well.</p>

<ul>
<li>Handle connection state, connection listener seems not handle all connection events</li>
<li>May stuck in strange login state</li>
<li>User do action while connecting</li>
<li>Decide when to close the connection and stop background service</li>
<li>Smack does not have much doc</li>
<li>aSmack does not have doc at all</li>
<li>Smack is still in development</li>
<li>Not so extensible in some cases and it is hard to modify the library</li>
</ul>


<h2>Customized login method</h2>

<p>If you customized the xmpp server to provide custom authenticate logic to integrate to external service, you can extends SASLMechanism in client side to support that. However, the authenticate call only accept jid and password parameter, and you may need to do some hack to pass more data to it if your authentication api required. Also, the response format of the login call is very limited, you cannot return extra customized error message so there may be some troubles when you want to have different handling on error cases in client side.</p>

<h2>Customized IQ</h2>

<p>Adding customized IQ is quite easy in smack, though you need it in a few places and may not work if you missed one. For one IQ type, you need to be clear on two things, the format you sent out and the format you receive. For the ease of development, you may want to put both implementation in one class, just make sure you don&rsquo;t messed with it.</p>

<p>For sent out, you actually just need to construct the xml string and return in getChildElementXML(), no other setup needed.</p>

<p>For receiving IQ response, first you need to create IQProvider and add to ProviderManager, matching the xmlns in the query object. The IQProvider is used to convert the response packet to your customized IQ object. Then you need to extends PacketListener, and when you create the connection object, add the listener to it, with a PacketTypeFilter to match your IQ class. With both provider and listener setup correctly, you should be able to receive the response of the IQ.</p>

<h2>XEP 0198 &ndash; stream management</h2>

<p>I have no knowledge of XMPP before working on this project (actually still don&rsquo;t know much about the protocol), but after implemented the basic program flow, we found that it is easy to trigger some message lost conditions. Turned out that xmpp is designed for stable network condition, so the support of mobile usage is actually quite bad.</p>

<ul>
<li><a href="http://fnanp.in-ulm.de/blog/2014/01/16/01-woes.html">http://fnanp.in-ulm.de/blog/2014/01/16/01-woes.html</a></li>
<li><a href="http://op-co.de/blog/posts/mobile_xmpp_in_2014/">http://op-co.de/blog/posts/mobile_xmpp_in_2014/</a></li>
</ul>


<p>An extension XEP 0198 is targeted for the message lost condition, I am not sure if it can really solve the problem, but at the time I started the development around end of July, XEP 0198 is not supported in Smack. The project seems quite active and the latest alpha version of Smack (4.0) seems included stream management but seems they have quite many changes and need some time to migrate from older version so I have not tried it yet. Also Smack 4.0 have Android support integrated so no need to use aSmack anymore.</p>

<ul>
<li><a href="https://github.com/igniterealtime/Smack">https://github.com/igniterealtime/Smack</a></li>
<li><a href="https://igniterealtime.jiveon.com/blogs/ignite/2014/09/13/smack-410-alpha1-available">https://igniterealtime.jiveon.com/blogs/ignite/2014/09/13/smack-410-alpha1-available</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quick look of messaging app UI]]></title>
    <link href="http://billynyh.github.io//blog/2014/08/03/messaging-ui/"/>
    <updated>2014-08-03T12:13:04+08:00</updated>
    <id>http://billynyh.github.io//blog/2014/08/03/messaging-ui</id>
    <content type="html"><![CDATA[<p>I use messaging app everyday, whatsapp, Facebook messenger, gtalk, web and mobile. The UI of different apps looks natural to me and never tried to &ldquo;see&rdquo; the design of it.</p>

<p>Recently I am working on a messaging UI with a screenshot designer gave me. When I try to imagine how will this design looks like with real chat usage, I am sure there are lots of details not included in the design so I take a deeper look of the messaging app I used everyday.</p>

<p>When you received a message, you usually can see sender information (name / avatar), message content, and sent time. And for the message you send, you may also see deliver status (sent/fail/received/read), retry when fail.</p>

<p>Here are some elements besdies those basic thing.</p>

<h2>Date header</h2>

<p>To avoid displaying the date in every message, a common handling is to have a &ldquo;Date header&rdquo; to divide the messages, and whatsapp also added a sticky header for the date.</p>

<p><a rel="gallery-date" href="/images/posts/20140803/b-2.jpg" class="fancybox">
<img src="/images/posts/20140803/c-2.jpg"/>
</a>
<a rel="gallery-date" href="/images/posts/20140803/b-3.jpg" class="fancybox">
<img src="/images/posts/20140803/c-3.jpg"/>
</a></p>

<h2>1-to-1 message VS group chat</h2>

<p>In whatsapp 1-to-1, it only shows the name in action bar and does not include it in the content, it totally makes sense because you know who you are talking to when you are in that page. And for group chat, as more then one people you are talking to but the incoming messages are all aligned left, it is necessary to have the name before each message.</p>

<p>Facebook messenger also has similar logic of adding name but it is outside the bubble.</p>

<p></p>
<a rel="gallery-chat" href="/images/posts/20140803/b-0.jpg" class="fancybox">
<img src="/images/posts/20140803/c-0.jpg"/>
</a>
<a rel="gallery-chat" href="/images/posts/20140803/b-6.jpg" class="fancybox">
<img src="/images/posts/20140803/c-6.jpg"/>
</a>
</p></p>

<h2>Message grouping</h2>

<p>Most messaging app styled the messages with talk bubbles, it is interesting to see that some of them are not simply a bubble.</p>

<p>
<a rel="gallery-grouping" href="/images/posts/20140803/b-5.jpg" class="fancybox">
<img src="/images/posts/20140803/c-5.jpg"/>
</a>
<a rel="gallery-grouping" href="/images/posts/20140803/b-3.jpg" class="fancybox">
<img src="/images/posts/20140803/c-3.jpg"/>
</a>
<a rel="gallery-grouping" href="/images/posts/20140803/b-1.jpg" class="fancybox">
<img src="/images/posts/20140803/c-1.jpg"/>
</a>
</p>


<p>For Facebook messenger, I found that when continuous messages from same person is grouped, avatar is only showed once, in both 1-to-1 or group message. However, sometimes messages are not grouped, I guess it only groups messages within a short time.</p>

<p>For whatsapp, it groups continuous messages to one single bubble, my first reaction is it would be fun to write a list view adapter for that, need to have 3 item types for one message (start, middle, end) and the types may change when new messages come in, eg. end &ndash;> middle.</p>

<h2>Understand what&rsquo;s behind it</h2>

<p>It is easy to reference other&rsquo;s UI, but it is also important to understand why they handle information that way and even we will not handle like them, make sure we aware of it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Y U NO public (or protected)]]></title>
    <link href="http://billynyh.github.io//blog/2014/07/20/yuno-public/"/>
    <updated>2014-07-20T20:47:27+08:00</updated>
    <id>http://billynyh.github.io//blog/2014/07/20/yuno-public</id>
    <content type="html"><![CDATA[<p>Recently started a new project in work so I finally have a chance to use SwipeRefreshLayout. The integration is very simple and does not change the structure of ListView like <a href="https://github.com/chrisbanes/android-pulltorefresh">Android-PullToRefresh</a> (I still love that library), so it should be easier to perform custom logic on the ListView afterwards.</p>

<p>I also like the progress bar embeded in the view very much, and would like to use it in other components to make my apps&rsquo;s UI consistent. A quick look to the <a href="https://android.googlesource.com/platform/frameworks/support/+/refs/heads/master/v4/java/android/support/v4/widget/SwipeRefreshLayout.java">source code</a> and found that it is implemented in the class <a href="https://android.googlesource.com/platform/frameworks/support/+/refs/heads/master/v4/java/android/support/v4/widget/SwipeProgressBar.java">SwipeProgressBar</a>. It is sad that the class is not public and it seems there is no similar class in the framework and support library.</p>

<p>So, I just copy the code of SwipeProgressBar and BakedBezierInterpolator(required by SwipeProgressBar and also not public) myself and put it in my common lib, then use it in my app.</p>

<p>I understand that there are some kind of design principle of the class/methods visibility, but sometime it is quite frustrating that after going through the framework source code and found that you cannot to extend the class because some properties are private and does not have a public/protected getter.</p>

<p><img src="/images/posts/20140720/yuno.jpg" style="width:300px" /></p>

<h2>Reference</h2>

<ul>
<li><a href="http://docs.oracle.com/javase/tutorial/java/javaOO/accesscontrol.html">Controlling Access to Members of a Class</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ViewCompat.canScrollVertically()]]></title>
    <link href="http://billynyh.github.io//blog/2014/06/22/viewcompat-support-v4/"/>
    <updated>2014-06-22T19:56:29+08:00</updated>
    <id>http://billynyh.github.io//blog/2014/06/22/viewcompat-support-v4</id>
    <content type="html"><![CDATA[<p>Due to watching world cup evey night through out the week, I spent most of my time these two weekends sleeping. Even not able to do some serious coding, I tried to clean up my long pending reading list, and I just took a look of <a href="http://developer.android.com/reference/android/support/v4/widget/SwipeRefreshLayout.html">SwipeRefreshLayout</a>.</p>

<p>Saw this class a while ago, just from the name of this class, I expected it to be a ViewGroup that handles the pull gesture of the Android style pull to refresh. I was not very interested in this class because there is no plan to touch the refresh UI in work, but it is always good to know it is in the support library.</p>

<p>What really caught my attention is the canChildScrollUp() method in SwipeRefreshLayout. It used ViewCompat.canScrollVertically and special handled pre-ICS.</p>

<p><a href="https://android.googlesource.com/platform/frameworks/support/+/refs/heads/master/v4/java/android/support/v4/widget/SwipeRefreshLayout.java">Source line 348</a></p>

<p>``` java</p>

<p>public boolean canChildScrollUp() {</p>

<pre><code>if (android.os.Build.VERSION.SDK_INT &lt; 14) {
    if (mTarget instanceof AbsListView) {
        final AbsListView absListView = (AbsListView) mTarget;
        return absListView.getChildCount() &gt; 0
                &amp;&amp; (absListView.getFirstVisiblePosition() &gt; 0 || absListView.getChildAt(0)
                        .getTop() &lt; absListView.getPaddingTop());
    } else {
        return mTarget.getScrollY() &gt; 0;
    }
} else {
    return ViewCompat.canScrollVertically(mTarget, -1);
}
</code></pre>

<p>}</p>

<p>```</p>

<p>(Well I don&rsquo;t understand why the ViewCompat method cannot(?) handle pre-ICS&hellip; then what&rsquo;s the point of Compat?)</p>

<p>I wasn&rsquo;t aware there is a canScrollVertically() method in View since ICS, and the ViewCompat also provides some interesting method that could simplify some custom ViewGroup implementation. Should put more time to review what&rsquo;s new in those commonly used classes as I believe there is no need to support pre-ICS soon.</p>

<p>Refrerence: <a href="http://antonioleiva.com/swiperefreshlayout/">http://antonioleiva.com/swiperefreshlayout/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[F8 Mobile talks]]></title>
    <link href="http://billynyh.github.io//blog/2014/05/12/play-list/"/>
    <updated>2014-05-12T00:35:47+08:00</updated>
    <id>http://billynyh.github.io//blog/2014/05/12/play-list</id>
    <content type="html"><![CDATA[<p>Got some days off last few weeks (public holiday and AL), spent quite lots of time on watching tech talks. (Another video summary post&hellip;)</p>

<h3><a href="https://www.youtube.com/watch?v=QErcmjPxEtg">Hacker Way: Designing the New Messenger</a></h3>

<p>The first one I watched was about designing Facebook messenger, a little bit slow, but talked about some design iterations and considerations through out the process which is quite interesting.</p>

<h3><a href="https://www.youtube.com/watch?v=mOyoTUETmSM">Hacker Way: Releasing and Optimizing Mobile Apps for the World</a></h3>

<div class="video-container">
<iframe src="http://www.youtube.com/embed/mOyoTUETmSM" frameborder="0" allowfullscreen></iframe>
</div>


<p>This one is really interesting. It talked about their Android app shipping schedule and workflow. The talk also included their buck system, heard this from other talks but this is the first time I heard (maybe I missed before) about the share build result over network, which is quite&hellip; crazy amazing.</p>

<h3><a href="https://www.youtube.com/watch?v=TCuVxU07NWs">Hacker Way: Mobile Engineering at Facebook&rsquo;s Scale</a></h3>

<div class="video-container">
<iframe src="http://www.youtube.com/embed/TCuVxU07NWs" frameborder="0" allowfullscreen></iframe>
</div>


<p>Similar contents but also worth watching.</p>

<h3><a href="http://www.infoq.com/presentations/Dagger">Dagger: A Fast Dependency Injector for Android and Java</a></h3>

<p>I have been researching the possibility of using dependency injection in current project. I think I will use it eventually, especially Facebook and Square are using it for a while. The biggest problem right now is it may affected every part of the app and I am not comfortable doing that without unit tests&hellip;</p>

<p>I also re-watched these two videos from IO 2013 as I am working on related view performance recently</p>

<ul>
<li><a href="https://www.youtube.com/watch?v=vQZFaec9NpA">Google I/O 2013 &ndash; Android Graphics Performance</a></li>
<li><a href="https://www.youtube.com/watch?v=NYtB6mlu7vA">Google I/O 2013 &ndash; Writing Custom Views for Android</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
