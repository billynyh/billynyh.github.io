<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: android | Just code it]]></title>
  <link href="http://billynyh.github.io//blog/categories/android/atom.xml" rel="self"/>
  <link href="http://billynyh.github.io//"/>
  <updated>2014-06-22T20:17:12+08:00</updated>
  <id>http://billynyh.github.io//</id>
  <author>
    <name><![CDATA[Billy Ng]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ViewCompat.canScrollVertically()]]></title>
    <link href="http://billynyh.github.io//blog/2014/06/22/viewcompat-support-v4/"/>
    <updated>2014-06-22T19:56:29+08:00</updated>
    <id>http://billynyh.github.io//blog/2014/06/22/viewcompat-support-v4</id>
    <content type="html"><![CDATA[<p>Due to watching world cup evey night through out the week, I spent most of my time these two weekends sleeping. Even not able to do some serious coding, I tried to clean up my long pending reading list, and I just took a look of <a href="http://developer.android.com/reference/android/support/v4/widget/SwipeRefreshLayout.html">SwipeRefreshLayout</a>.</p>

<p>Saw this class a while ago, just from the name of this class, I expected it to be a ViewGroup that handles the pull gesture of the Android style pull to refresh. I was not very interested in this class because there is no plan to touch the refresh UI in work, but it is always good to know it is in the support library.</p>

<p>What really caught my attention is the canChildScrollUp() method in SwipeRefreshLayout. It used ViewCompat.canScrollVertically and special handled pre-ICS.</p>

<p><a href="https://android.googlesource.com/platform/frameworks/support/+/refs/heads/master/v4/java/android/support/v4/widget/SwipeRefreshLayout.java">Source line 348</a></p>

<p>``` java</p>

<p>public boolean canChildScrollUp() {</p>

<pre><code>if (android.os.Build.VERSION.SDK_INT &lt; 14) {
    if (mTarget instanceof AbsListView) {
        final AbsListView absListView = (AbsListView) mTarget;
        return absListView.getChildCount() &gt; 0
                &amp;&amp; (absListView.getFirstVisiblePosition() &gt; 0 || absListView.getChildAt(0)
                        .getTop() &lt; absListView.getPaddingTop());
    } else {
        return mTarget.getScrollY() &gt; 0;
    }
} else {
    return ViewCompat.canScrollVertically(mTarget, -1);
}
</code></pre>

<p>}</p>

<p>```</p>

<p>(Well I don&rsquo;t understand why the ViewCompat method cannot(?) handle pre-ICS&hellip; then what&rsquo;s the point of Compat?)</p>

<p>I wasn&rsquo;t aware there is a canScrollVertically() method in View since ICS, and the ViewCompat also provides some interesting method that could simplify some custom ViewGroup implementation. Should put more time to review what&rsquo;s new in those commonly used classes as I believe there is no need to support pre-ICS soon.</p>

<p>Refrerence: <a href="http://antonioleiva.com/swiperefreshlayout/">http://antonioleiva.com/swiperefreshlayout/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[F8 Mobile talks]]></title>
    <link href="http://billynyh.github.io//blog/2014/05/12/play-list/"/>
    <updated>2014-05-12T00:35:47+08:00</updated>
    <id>http://billynyh.github.io//blog/2014/05/12/play-list</id>
    <content type="html"><![CDATA[<p>Got some days off last few weeks (public holiday and AL), spent quite lots of time on watching tech talks. (Another video summary post&hellip;)</p>

<h3><a href="https://www.youtube.com/watch?v=QErcmjPxEtg">Hacker Way: Designing the New Messenger</a></h3>

<p>The first one I watched was about designing Facebook messenger, a little bit slow, but talked about some design iterations and considerations through out the process which is quite interesting.</p>

<h3><a href="https://www.youtube.com/watch?v=mOyoTUETmSM">Hacker Way: Releasing and Optimizing Mobile Apps for the World</a></h3>

<div class="video-container">
<iframe src="http://www.youtube.com/embed/mOyoTUETmSM" frameborder="0" allowfullscreen></iframe>
</div>


<p>This one is really interesting. It talked about their Android app shipping schedule and workflow. The talk also included their buck system, heard this from other talks but this is the first time I heard (maybe I missed before) about the share build result over network, which is quite&hellip; crazy amazing.</p>

<h3><a href="https://www.youtube.com/watch?v=TCuVxU07NWs">Hacker Way: Mobile Engineering at Facebook&rsquo;s Scale</a></h3>

<div class="video-container">
<iframe src="http://www.youtube.com/embed/TCuVxU07NWs" frameborder="0" allowfullscreen></iframe>
</div>


<p>Similar contents but also worth watching.</p>

<h3><a href="http://www.infoq.com/presentations/Dagger">Dagger: A Fast Dependency Injector for Android and Java</a></h3>

<p>I have been researching the possibility of using dependency injection in current project. I think I will use it eventually, especially Facebook and Square are using it for a while. The biggest problem right now is it may affected every part of the app and I am not comfortable doing that without unit tests&hellip;</p>

<p>I also re-watched these two videos from IO 2013 as I am working on related view performance recently</p>

<ul>
<li><a href="https://www.youtube.com/watch?v=vQZFaec9NpA">Google I/O 2013 &ndash; Android Graphics Performance</a></li>
<li><a href="https://www.youtube.com/watch?v=NYtB6mlu7vA">Google I/O 2013 &ndash; Writing Custom Views for Android</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Talks from Facebook, Paper team]]></title>
    <link href="http://billynyh.github.io//blog/2014/04/21/talks-from-paper/"/>
    <updated>2014-04-21T21:10:00+08:00</updated>
    <id>http://billynyh.github.io//blog/2014/04/21/talks-from-paper</id>
    <content type="html"><![CDATA[<p>During the long weekend of Easter holiday, I spent some time on watching tech talks from Facebook. The newly uploaded &ldquo;Building Paper 2014&rdquo; series is really cool. Even I don&rsquo;t do iOS, seeing how they tackle the problems and share their approach is totally enjoyable.</p>

<p>Android and iOS apps may have different platform structures, but when your app goes bigger, most likely you will need another level of abstraction to handle large amount of logic, UI and communication betweens components. And when you want further performance tuning, you may need to go beyond the platform like what Paper team did. At that stage, although you are using different languages, the architecture will be similar across platforms.</p>

<div class="video-container">
<iframe src="http://www.youtube.com/embed/ZdiBPHpxGd0" frameborder="0" allowfullscreen></iframe>
</div>


<p>I also like the part about <a href="https://www.youtube.com/watch?v=-KrF4bIofeo">contextually aware tutorials</a>, if you have time, you should watch the <a href="https://www.youtube.com/watch?v=OiY1cheLpmI">whole event</a>.</p>

<h2>UI details and A/B test</h2>

<p>Besides new talks, I also watched an old talk from &ldquo;Mobile Developer Day by Facebook + Parse 2013&rdquo;. Not sure why I skipped this talk before, probably because the title is so generic &ndash; <a href="https://www.youtube.com/watch?v=e2w8z6mI47U">Mobile at Facebook</a>. The part that caught my attention is the A/B testing on their drawer to nav bar changes. It&rsquo;s not about what framework they used, not about how many users they put in the AB test, it&rsquo;s about how you see the numbers.</p>

<p>She mentioned that after changing the drawer to nav bar, the result in internal test is good, navigation experience is improved, users feel the app faster. However, when they shipped to 1% test, they find that users liking and commenting less, because users are kind of distracted by the nav bar notification.</p>

<p>This is very interesting to me. We do not have a very detailed metrics system on mobile (have some, but not detailed), I am sure if we do AB test like that, we will not be able to see the abnormal usage changes. This even put me in a doubt that what if we already did changes like that and we still don&rsquo;t know that?</p>

<p>This is like a regression test, not on code but on usage.</p>

<div class="video-container">
<iframe src="http://www.youtube.com/embed/e2w8z6mI47U" frameborder="0" allowfullscreen></iframe>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android image decode bug on Samsung devices]]></title>
    <link href="http://billynyh.github.io//blog/2014/04/13/android-image-black-lines/"/>
    <updated>2014-04-13T23:21:18+08:00</updated>
    <id>http://billynyh.github.io//blog/2014/04/13/android-image-black-lines</id>
    <content type="html"><![CDATA[<h2>Image decode bug on Samsung devices</h2>

<p>Few weeks ago I got some users reported about seeing &ldquo;black lines&rdquo; on the images. In 9GAG app, displaying images is everything so I can&rsquo;t just leave the problem unsolved.</p>

<p>At first I thought it is a problem I worked on before that when multiple download tasks running for the same image, may corrupt the file. However, this time is a little bit different.</p>

<p><img src="/images/posts/20140413/blacklines.png"/></p>

<p>I checked those reports and find that only users using (high end?) Samsung devices (S4 and Note3) hit this problem, and I cannot reproduce the problem on my testing devices. Luckily, we recently equipped a Samsung Galaxy S4 in office so I can schedule some time on this problem. And they are actually not black lines, they are transparent lines&hellip;</p>

<p>Even I suspected it is a manufacture specific problem, I did not expect I can reproduce the problem easily, so I am a little bit surprised to see the problem on the device. There are two possible causes of the problem, 1. the image file corrupted, 2. the image is correct but corrupted during decode to bitmap object. After a little test, I can confirm that I am dealing with (2)&hellip; When debugging with logcat, the following logs appear everytime the problem occurs.</p>

<pre><code>skia  D  JPEG content is corrupt, got a zero length row(272)
skia  D  JPEG content is corrupt, got a zero length row(273)
skia  D  JPEG content is corrupt, got a zero length row(274)
skia  D  JPEG content is corrupt, got a zero length row(275)
skia  D  JPEG content is corrupt, got a zero length row(276)
skia  D  JPEG content is corrupt, got a zero length row(277)
</code></pre>

<p>I thought once I have the error message, I am done, problem like this must be all over google and stackoverflow&hellip;</p>

<p>Nope, <a href="https://www.google.com/search?q=skia+JPEG+content+is+corrupt">not this time</a>.</p>

<p>There is not much I can do when there is only logs but no error message returned, I can&rsquo;t even detect the problem and reload the images. So I approach to tackle the problem is to reduce the chance of happening instead of fixing it. One observation is that, even this is not a step of reproduce, it usually/always comes with a dalvikvm heap grow. Follow on this direction and tuned a bit memory performance, somehow like harder to hit the problem. (magic?)</p>

<p>This is for sure not a &ldquo;fix&rdquo;, and &ldquo;looks harder to hit the problem&rdquo; could actually be luck, but that&rsquo;s all I can get in a few hour scheduled time.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Notes on migrating Android project from ant to gradle]]></title>
    <link href="http://billynyh.github.io//blog/2014/03/31/gradle-migration/"/>
    <updated>2014-03-31T00:44:28+08:00</updated>
    <id>http://billynyh.github.io//blog/2014/03/31/gradle-migration</id>
    <content type="html"><![CDATA[<p>Few months ago, I spent a little time to try migrating my Android project from to gradle, although it is announced in last Google IO (May 2013), and saw some big companies switched to it early, I considered that not ready that time and decided to wait for later version.</p>

<h3>Projects structures</h3>

<p>The project I am working on used some library projects like pull to refresh, facebook sdk, google play services, etc, due to the limitation of the old ant build system, you have to include the source and compile with your app. We also splitted some of our own components to separate library projects for reuseing in other projects. Currently my app is depending on 14 other library projects, and it takes about 3 minutes to have do a clean build.</p>

<p>We also use git submodules to include projects from other repositories. I am still not sure if this is the right way to manage projects especially when we keep modifying the libraries. It increases the complexity when we have multiple branches in development, and causes some pains when merging codes.</p>

<h3>First migration attempt</h3>

<p>I tried to migrate to gradle few months ago, when Android studio was in version 0.2 I think. One of the unknown part of the migration, it&rsquo;s 0 or 100, no 50% migrated. Even you build every library successfully, it does not mean you are getting close to finish the migration. In my case, I first made a simple app to get familiar with the build system, then migrated my libraries one by one, but guess what I got when I tried to have a complete build? Out of memory&hellip; I googled a little bit and found a way to increase the memory limit but still got the same error, in both command line and Android studio.</p>

<p>I didn&rsquo;t put more time on that since the ant scripts still work at that time and I got (many) other tasks pending.</p>

<h3>Second attempt</h3>

<p>I recently reopened the migration task, mainly for 3 reasons.</p>

<ol>
<li>Eclipse can&rsquo;t handle the project anymore. When I tried to add some code in a core library project that is also used in 3 other library projects, eclipse just hangs there and I have to kill it myself.</li>
<li>Need more tools for development. Actually this is one of the reason of my first attempt of migration, I had some (simple) scripts/code generators to help development, some are standalone but some are hooked into the build flow. It does not make sense to keep developing scripts based on ant if there is a migration coming, so I didn&rsquo;t add any scripts in the last 6 months. In order to continue the development, the migration task now becomes a blocker.</li>
<li>Team expand. We are expecting more man power on Android, the migration has to be done before they start.</li>
</ol>


<p>Not like last time, this is no longer a &ldquo;try out&rdquo;, it has to be done, no matter how many effort required.</p>

<p>After reinstalling the Android studio and gradle, I still got the out of memory error during compile. At this point, even I can get through the compile task of each library, I may got other error when combining everything in the app project, so I have to do some experiments first. I compiled all library projects to aar and uploaded to local maven repositories, this also required me to modify the build.gradle of the app project to use aar instead of compile form source. With some luck, I can compile the app with those aar successfully.</p>

<p>Next step is to make it fits my development workflow. Some library projects need to compile from source and those relatively stable libraries can use aar. Fortunately it worked as expect and did not gave me out of memory error, and even better, it also worked on Android studio without any extra modification.</p>

<p>Migrating the basic workflow is just the beginning, there are still many things to test before using it to do release, like app signing, proguard, build with different package names, etc&hellip; But before those tasks, there is still one problem needed to work on. I am not sure it is just me, but the gradle configure time seems very long with multi projects setup, and it may not suppose to be that slow. I posted my question on <a href="https://plus.google.com/u/0/105980838674582844427/posts/8sYLTN6WyCt">Google plus</a> and got some quick responses from Xavier Ducrohet. He said the configure time should be around 3s if run with daemon, but what I got is at least 10s for every one, even a simple &ldquo;gradle projects&rdquo; command call. I am not sure if this is the best I can get but it would not be a great development experience if every run need to wait for 10s and the actual compile is just 2s.</p>
]]></content>
  </entry>
  
</feed>
